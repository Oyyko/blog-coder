<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>八股 on Oyyko</title>
    <link>https://blog.oyyko.com/tags/%E5%85%AB%E8%82%A1/</link>
    <description>Recent content in 八股 on Oyyko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 08 Mar 2024 03:08:49 -0800</lastBuildDate>
    <atom:link href="https://blog.oyyko.com/tags/%E5%85%AB%E8%82%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Infra知识点</title>
      <link>https://blog.oyyko.com/posts/infra/</link>
      <pubDate>Wed, 11 Oct 2023 23:54:53 -0700</pubDate>
      <guid>https://blog.oyyko.com/posts/infra/</guid>
      <description>本文为摘录网络内容. 由于时间原因未记录原文地址，谷歌即可找到原文。&#xA;简述数据库三大范式 Link to heading 第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。&#xA;数据库第二范式：关系模式必须满足第一范式，并且所有非主属性都完全依赖于主码。注意，符合第二范式的关系模型可能还存在数据冗余、更新异常等问题。关系模型（学号，姓名，专业编号，专业名称）中，学号-&amp;gt;姓名，而专业编号-&amp;gt;专业名称，不满足数据库第二范式&#xA;数据库第三范式：关系模型满足第二范式，所有非主属性对任何候选关键字都不存在传递依赖。即每个属性都跟主键有直接关系而不是间接关系。接着以学生表举例，对于关系模型（学号，姓名，年龄，性别，所在院校，院校地址，院校电话）院校地址，院校电话和学号不存在直接关系，因此不满足第三范式。&#xA;简述MySQL的架构 Link to heading MySQL可以分为应用层,逻辑层,数据库引擎层,物理层。&#xA;应用层：负责和客户端，响应客户端请求，建立连接，返回数据。&#xA;逻辑层：包括SQK接口，解析器，优化器，Cache与buffer。&#xA;数据库引擎层：有常见的MyISAM,InnoDB等等。&#xA;物理层：负责文件存储，日志等等。&#xA;简述执行SQL语言的过程 Link to heading 客户端首先通过连接器进行身份认证和权限相关 如果是执行查询语句的时候，会先查询缓存，但MySQL 8.0 版本后该步骤移除。 没有命中缓存的话，SQL 语句就会经过解析器，分析语句，包括语法检查等等。 通过优化器，将用户的SQL语句按照 MySQL 认为最优的方案去执行。 执行语句，并从存储引擎返回数据。&#xA;简述MySQL的共享锁排它锁 Link to heading 共享锁也称为读锁，相互不阻塞，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。排他锁也称为写锁，会阻塞其他的写锁和读锁，确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。&#xA;简述MySQL中的按粒度的锁分类 Link to heading 表级锁: 对当前操作的整张表加锁,实现简单，加锁快，但并发能力低。&#xA;行锁: 锁住某一行，如果表存在索引，那么记录锁是锁在索引上的，如果表没有索引，那么 InnoDB 会创建一个隐藏的聚簇索引加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。&#xA;Gap 锁：也称为间隙锁: 锁定一个范围但不包括记录本身。其目的是为了防止同一事物的两次当前读出现幻读的情况。&#xA;Next-key Lock： 行锁+gap锁。&#xA;如何解决数据库死锁 Link to heading 预先检测到死锁的循环依赖，并立即返回一个错误。 当查询的时间达到锁等待超时的设定后放弃锁请求。&#xA;简述乐观锁和悲观锁 Link to heading 乐观锁：对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁，只有到数据提交的时候才通过一种机制来验证数据是否存在冲突。&#xA;悲观锁：对于数据冲突保持一种悲观态度，在修改数据之前把数据锁住，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作，直到前面一个人把锁释放后下一个人数据加锁才可对数据进行加锁，然后才可以对数据进行操作，一般数据库本身锁的机制都是基于悲观锁的机制实现的。&#xA;简述InnoDB存储引擎 Link to heading InnoDB 是 MySQL 的默认事务型引擎，支持事务，表是基于聚簇索引建立的。支持表级锁和行级锁，支持外键，适合数据增删改查都频繁的情况。</description>
    </item>
  </channel>
</rss>
